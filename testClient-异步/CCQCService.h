/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CCQCService_H
#define CCQCService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "Hello_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CCQCServiceIf {
 public:
  virtual ~CCQCServiceIf() {}
  virtual void DataTransfer(ReResult& _return, const int16_t iMessageType, const std::string& strMessageData) = 0;
};

class CCQCServiceIfFactory {
 public:
  typedef CCQCServiceIf Handler;

  virtual ~CCQCServiceIfFactory() {}

  virtual CCQCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CCQCServiceIf* /* handler */) = 0;
};

class CCQCServiceIfSingletonFactory : virtual public CCQCServiceIfFactory {
 public:
  CCQCServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CCQCServiceIf>& iface) : iface_(iface) {}
  virtual ~CCQCServiceIfSingletonFactory() {}

  virtual CCQCServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CCQCServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CCQCServiceIf> iface_;
};

class CCQCServiceNull : virtual public CCQCServiceIf {
 public:
  virtual ~CCQCServiceNull() {}
  void DataTransfer(ReResult& /* _return */, const int16_t /* iMessageType */, const std::string& /* strMessageData */) {
    return;
  }
};

typedef struct _CCQCService_DataTransfer_args__isset {
  _CCQCService_DataTransfer_args__isset() : iMessageType(false), strMessageData(false) {}
  bool iMessageType :1;
  bool strMessageData :1;
} _CCQCService_DataTransfer_args__isset;

class CCQCService_DataTransfer_args {
 public:

  CCQCService_DataTransfer_args(const CCQCService_DataTransfer_args&);
  CCQCService_DataTransfer_args& operator=(const CCQCService_DataTransfer_args&);
  CCQCService_DataTransfer_args() : iMessageType(0), strMessageData() {
  }

  virtual ~CCQCService_DataTransfer_args() throw();
  int16_t iMessageType;
  std::string strMessageData;

  _CCQCService_DataTransfer_args__isset __isset;

  void __set_iMessageType(const int16_t val);

  void __set_strMessageData(const std::string& val);

  bool operator == (const CCQCService_DataTransfer_args & rhs) const
  {
    if (!(iMessageType == rhs.iMessageType))
      return false;
    if (!(strMessageData == rhs.strMessageData))
      return false;
    return true;
  }
  bool operator != (const CCQCService_DataTransfer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCQCService_DataTransfer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CCQCService_DataTransfer_pargs {
 public:


  virtual ~CCQCService_DataTransfer_pargs() throw();
  const int16_t* iMessageType;
  const std::string* strMessageData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CCQCService_DataTransfer_result__isset {
  _CCQCService_DataTransfer_result__isset() : success(false) {}
  bool success :1;
} _CCQCService_DataTransfer_result__isset;

class CCQCService_DataTransfer_result {
 public:

  CCQCService_DataTransfer_result(const CCQCService_DataTransfer_result&);
  CCQCService_DataTransfer_result& operator=(const CCQCService_DataTransfer_result&);
  CCQCService_DataTransfer_result() {
  }

  virtual ~CCQCService_DataTransfer_result() throw();
  ReResult success;

  _CCQCService_DataTransfer_result__isset __isset;

  void __set_success(const ReResult& val);

  bool operator == (const CCQCService_DataTransfer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CCQCService_DataTransfer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CCQCService_DataTransfer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CCQCService_DataTransfer_presult__isset {
  _CCQCService_DataTransfer_presult__isset() : success(false) {}
  bool success :1;
} _CCQCService_DataTransfer_presult__isset;

class CCQCService_DataTransfer_presult {
 public:


  virtual ~CCQCService_DataTransfer_presult() throw();
  ReResult* success;

  _CCQCService_DataTransfer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CCQCServiceClient : virtual public CCQCServiceIf {
 public:
  CCQCServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CCQCServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void DataTransfer(ReResult& _return, const int16_t iMessageType, const std::string& strMessageData);
  void send_DataTransfer(const int16_t iMessageType, const std::string& strMessageData);
  void recv_DataTransfer(ReResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CCQCServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CCQCServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CCQCServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_DataTransfer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CCQCServiceProcessor(::apache::thrift::stdcxx::shared_ptr<CCQCServiceIf> iface) :
    iface_(iface) {
    processMap_["DataTransfer"] = &CCQCServiceProcessor::process_DataTransfer;
  }

  virtual ~CCQCServiceProcessor() {}
};

class CCQCServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CCQCServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CCQCServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CCQCServiceIfFactory > handlerFactory_;
};

class CCQCServiceMultiface : virtual public CCQCServiceIf {
 public:
  CCQCServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CCQCServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CCQCServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CCQCServiceIf> > ifaces_;
  CCQCServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CCQCServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void DataTransfer(ReResult& _return, const int16_t iMessageType, const std::string& strMessageData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DataTransfer(_return, iMessageType, strMessageData);
    }
    ifaces_[i]->DataTransfer(_return, iMessageType, strMessageData);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CCQCServiceConcurrentClient : virtual public CCQCServiceIf {
 public:
  CCQCServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CCQCServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void DataTransfer(ReResult& _return, const int16_t iMessageType, const std::string& strMessageData);
  int32_t send_DataTransfer(const int16_t iMessageType, const std::string& strMessageData);
  void recv_DataTransfer(ReResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
