// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#if 0
#include "HelloService.h"
#include <thrift/transport/TBufferTransports.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PlatformThreadFactory.h>
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/TToString.h>
#include <thrift/stdcxx.h>

#include <iostream>
#include <stdexcept>
#include <sstream>

//using namespace ::apache::thrift;
//using namespace ::apache::thrift::protocol;
//using namespace ::apache::thrift::transport;
//using namespace ::apache::thrift::server;
//
//using boost::shared_ptr;
//
//using namespace  ::HelloThrift::Interface;

using namespace std;
using namespace apache::thrift;
using namespace apache::thrift::concurrency;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

//using namespace tutorial;
//using namespace shared;
//using namespace  ::HelloThrift::Interface;
using namespace  HelloThrift;
using namespace  HelloThrift::Interface;;

class HelloServiceHandler : virtual public HelloServiceIf {
 public:
  HelloServiceHandler() {
    // Your initialization goes here
  }

  void HelloString(std::string& _return, const std::string& para) {
    // Your implementation goes here
    printf("HelloString,I got your name %s\n",para.c_str());
	_return = "give you back";
  }

  int32_t HelloInt(const int32_t para) {
    // Your implementation goes here
    printf("HelloInt\n");
	return para;
  }

  bool HelloBoolean(const bool para) {
    // Your implementation goes here
    printf("HelloBoolean\n");
	return para;
  }

  void HelloVoid() {
    // Your implementation goes here
    printf("HelloVoid\n");
  }

  void HelloNull(std::string& _return) {
    // Your implementation goes here
    printf("HelloNull\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HelloServiceHandler> handler(new HelloServiceHandler());
  shared_ptr<TProcessor> processor(new HelloServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

#endif


#include "HelloService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/server/TThreadPoolServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace apache::thrift::concurrency;
using namespace ::apache::thrift::server;

class HelloServiceHandler : virtual public HelloServiceIf {
public:
	HelloServiceHandler() {
		// Your initialization goes here
	}

	int16_t addxy(const int16_t x, const int16_t y) {
		// Your implementation goes here
		return x + y;
		printf("addxy\n");
	}

};

int main(int argc, char **argv) 
{
	printf("hello i am server\n");
	int port = 9090;
	::apache::thrift::stdcxx::shared_ptr<HelloServiceHandler> handler(new HelloServiceHandler());
	::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new HelloServiceProcessor(handler));
	::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
	::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
	::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

	/* TThreadedServer server(
		stdcxx::make_shared<HelloServiceProcessor>(stdcxx::make_shared<HelloServiceHandler>()),
		stdcxx::make_shared<TServerSocket>(9090), //port
		stdcxx::make_shared<TBufferedTransportFactory>(),
		stdcxx::make_shared<TBinaryProtocolFactory>());*/
	//TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
	// This server only allows one connection at a time, but spawns no threads
	/*TSimpleServer server(
		stdcxx::make_shared<HelloServiceProcessor>(stdcxx::make_shared<HelloServiceHandler>()),
		stdcxx::make_shared<TServerSocket>(9090),
		stdcxx::make_shared<TBufferedTransportFactory>(),
		stdcxx::make_shared<TBinaryProtocolFactory>());
	const int workerCount = 4;
	stdcxx::shared_ptr<ThreadManager> threadManager =ThreadManager::newSimpleThreadManager(workerCount);
	threadManager->threadFactory(stdcxx::make_shared<PlatformThreadFactory>());*/

	
	//* Here are some alternate server types...

	// This server only allows one connection at a time, but spawns no threads
	//TSimpleServer server(
	//stdcxx::make_shared<CalculatorProcessor>(stdcxx::make_shared<CalculatorHandler>()),
	//stdcxx::make_shared<TServerSocket>(9090),
	//stdcxx::make_shared<TBufferedTransportFactory>(),
	//stdcxx::make_shared<TBinaryProtocolFactory>());

	const int workerCount = 4;
	stdcxx::shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(workerCount);
	threadManager->threadFactory(stdcxx::make_shared<PlatformThreadFactory>());

	// This server allows "workerCount" connection at a time, and reuses threads
	TThreadPoolServer server(
		//stdcxx::make_shared<HelloServiceProcessorFactory>(stdcxx::make_shared<HelloServiceCloneFactory>()),
		stdcxx::make_shared<HelloServiceProcessorFactory>(stdcxx::make_shared<HelloServiceFactory>()),
		stdcxx::make_shared<TServerSocket>(9090),
		stdcxx::make_shared<TBufferedTransportFactory>(),
		stdcxx::make_shared<TBinaryProtocolFactory>(),
		threadManager);

	stdcxx::shared_ptr<ThreadManager> threadManager =
	ThreadManager::newSimpleThreadManager(workerCount);
	threadManager->threadFactory(
	stdcxx::make_shared<PlatformThreadFactory>());
	threadManager->start();

	
	

	threadManager->start();
	server.serve();
	return 0;
}
