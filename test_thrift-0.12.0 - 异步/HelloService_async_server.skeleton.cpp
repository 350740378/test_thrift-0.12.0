// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "HelloService.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

class HelloServiceAsyncHandler : public HelloServiceCobSvIf {
 public:
  HelloServiceAsyncHandler() {
    syncHandler_ = std::auto_ptr<HelloServiceHandler>(new HelloServiceHandler);
    // Your initialization goes here
  }
  virtual ~HelloServiceAsyncHandler();

  void addxy(::apache::thrift::stdcxx::function<void(int16_t const& _return)> cob, const int16_t x, const int16_t y) {
    int16_t _return = 0;
    _return = syncHandler_->addxy(x, y);
    return cob(_return);
  }

 protected:
  std::auto_ptr<HelloServiceHandler> syncHandler_;
};

